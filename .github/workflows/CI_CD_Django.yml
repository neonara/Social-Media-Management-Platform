# File: .github/workflows/backend-docker.yml
name: CI/CD Pipeline for Django

on:
  push:
    branches: [master]
  pull_request:
    branches: [master]

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
      # Checkout code
      - name: Checkout code
        uses: actions/checkout@v2

      # Set up Python
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: "3.11.9"

      # Install dependencies
      - name: Install Django dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # Run Django tests
      - name: Run Django tests
        run: |
          python manage.py test

      # Docker login
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}

      # Build and push image
      - name: Build and push backend Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: |
            achrefmaarfi0/planit_backend_docker:latest
            achrefmaarfi0/planit_backend_docker:${{ github.sha }}

  deploy:
    # This job depends on the build-and-push job finishing successfully
    needs: build-and-push
    runs-on: ubuntu-latest

    # IMPORTANT: Only run this step on a push to the master branch, NOT on pull requests.
    if: github.ref == 'refs/heads/master' && github.event_name == 'push'

    steps:
      - name: Deploy to VPS
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USERNAME }}
          key: ${{ secrets.VPS_SSH_KEY }}
          script: |
            # Navigate to the directory containing your production docker-compose file
            cd /planit

            # Pull the newest images from Docker Hub that were just pushed
            docker compose -f docker-compose.prod.yml pull

            # Stop and restart all services with the new images
            # The .env.prod file in this directory provides the environment variables
            docker compose -f docker-compose.prod.yml up -d --remove-orphans

            # Clean up old, unused Docker images to save space
            docker image prune -af
